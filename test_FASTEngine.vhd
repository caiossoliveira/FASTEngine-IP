LIBRARY IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;

use work.fast_engine_types.all;

ENTITY test_FASTEngine IS
END ENTITY;

ARCHITECTURE test_FASTEngine OF test_FASTEngine IS
  COMPONENT FASTEngine IS
    port (
		clk: in STD_LOGIC;
		reset: in STD_LOGIC;
		enable: in STD_LOGIC;

        FASTByte_in: in STD_LOGIC_VECTOR (7 downto 0);
		read_in: in STD_LOGIC;

		startOfMachine_out: out STD_LOGIC;
		reading_out: out STD_LOGIC;

		type_out : out STD_LOGIC;
        updateAction_out : out STD_LOGIC_VECTOR(6 downto 0);
		position_out : out STD_LOGIC_VECTOR(3 downto 0);
		size_out : out STD_LOGIC_VECTOR(63 downto 0);
		exp_out : out STD_LOGIC_VECTOR(31 downto 0);
		man_out : out STD_LOGIC_VECTOR(63 downto 0);

        ready_out : out STD_LOGIC
	);
  END COMPONENT;

  SIGNAL counter : INTEGER;
  SIGNAL sig_aux_counter : STD_LOGIC;
  
  SIGNAL sig_clk    : STD_LOGIC := '0';
  SIGNAL sig_reset  : STD_LOGIC;
  SIGNAL sig_msg_in : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL sig_enable : STD_LOGIC := '0';

  SIGNAL sig_read   : STD_LOGIC;
  SIGNAL sig_startOfMachine :   STD_LOGIC;
  SIGNAL sig_reading    : STD_LOGIC := '0';

  SIGNAL sig_type_out : STD_LOGIC;
  SIGNAL sig_updateAction_out : STD_LOGIC_VECTOR(6 downto 0);
  SIGNAL sig_position_out : STD_LOGIC_VECTOR(3 downto 0);
  SIGNAL sig_size_out : STD_LOGIC_VECTOR(63 downto 0);
  SIGNAL sig_exp_out : STD_LOGIC_VECTOR(31 downto 0);
  SIGNAL sig_man_out : STD_LOGIC_VECTOR(63 downto 0);

  SIGNAL sig_ready_out : STD_LOGIC;

  SIGNAL sig_test_out : STD_LOGIC_VECTOR(7 downto 0);

  -- FASTMem signals declarations
  signal sl_enableFASTMem: STD_LOGIC;
  signal mem_counter: INTEGER := 0;
  signal FASTByte: STD_LOGIC_VECTOR (7 downto 0);

  -- book signals declarations
  signal bidOrderDepthBook_size : POSITION_TYPE_SIZE(0 to 9) := (OTHERS => X"0000000000000000");
  signal bidOrderDepthBook_px_exp : POSITION_TYPE_PX_EXP(0 to 9) := (OTHERS => X"00000000");
  signal bidOrderDepthBook_px_man : POSITION_TYPE_PX_MAN(0 to 9) := (OTHERS => X"FFFFFFFFFFFFFFFF");

  signal offerOrderDepthBook_size : POSITION_TYPE_SIZE(0 to 9) := (OTHERS => X"0000000000000000");
  signal offerOrderDepthBook_px_exp : POSITION_TYPE_PX_EXP(0 to 9) := (OTHERS => X"00000000");
  signal offerOrderDepthBook_px_man : POSITION_TYPE_PX_MAN(0 to 9) := (OTHERS => X"FFFFFFFFFFFFFFFF");

  -- SYMBOLIC ENCODED state machine: FASTMem
  type FASTMem_type is (
      Start, writeByte
  );
 -- attribute ENUM_ENCODING of FASTMem_type: type is ... -- enum_encoding attribute is not supported for symbolic encoding

signal FASTMem, NextState_FASTMem: FASTMem_type;

-- Declarations of pre-registered internal signals
--signal int_msg_out, next_msg_out: STD_LOGIC_VECTOR (7 downto 0);
signal next_mem_counter: INTEGER := 0;
--signal next_mem_out: STD_LOGIC_VECTOR (7 downto 0);
--signal next_FASTByte : STD_LOGIC_VECTOR (7 downto 0);
signal next_sig_msg_in : STD_LOGIC_VECTOR( 7 DOWNTO 0);
--signal next_read: STD_LOGIC;
--signal next_sig_read : STD_LOGIC;
--signal next_reading: STD_LOGIC;
--signal next_startOfMachine: STD_LOGIC;


BEGIN
    fe  : FASTEngine  PORT MAP (clk => sig_clk, reset => sig_reset, FASTByte_in => sig_msg_in, enable => sig_enable,
                                    read_in => sig_read, startOfMachine_out => sig_startOfMachine, reading_out => sig_reading,
                                    type_out => sig_type_out, updateAction_out => sig_updateAction_out, position_out => sig_position_out, size_out => sig_size_out, exp_out => sig_exp_out, man_out => sig_man_out, ready_out => sig_ready_out);


----------------------------------------------------------------------
-- Machine: FASTMem
----------------------------------------------------------------------
------------------------------------
-- Next State Logic (combinatorial)
------------------------------------
FASTMem_NextState: process (mem_counter, FASTByte, sig_read, sig_reading, sig_startOfMachine, FASTMem)
-- machine variables declarations
variable FASTMemory: std_logic_vector(0 to 45111) := X"";

begin
	NextState_FASTMem <= FASTMem;
	-- Set default values for outputs and signals
	sig_read <= '1';
    next_sig_msg_in <= sig_msg_in;
	next_mem_counter <= mem_counter;
	case FASTMem is
		when Start =>
			IF (sig_startOfMachine = '1' AND sig_reading = '0') THEN
				sig_read <= '1';
			ELSIF (sig_startOfMachine = '0' AND sig_reading = '1') THEN
				sig_read <= '1';
			ELSIF (sig_startOfMAchine = '0' AND sig_reading = '0') THEN
				sig_read <= '0';
			END IF;
			if sig_read = '1' then
				NextState_FASTMem <= writeByte;
			end if;
		when writeByte =>
			IF (sig_reading = '1') THEN
				next_sig_msg_in <= FASTMemory(mem_counter to (mem_counter + 7));
				next_mem_counter <= mem_counter + 8;
			END IF;
			if sig_startOfMachine = '1' then
				NextState_FASTMem <= Start;
			else
				NextState_FASTMem <= writeByte;
			end if;
--vhdl_cover_off
		when others =>
			null;
--vhdl_cover_on
	end case;
end process;

------------------------------------
-- Current State Logic (sequential)
------------------------------------
FASTMem_CurrentState: process (sig_clk)
begin
	if rising_edge(sig_clk) then
		if sig_reset = '1' then
			FASTMem <= Start;
		else
			if sig_enable = '1' then
				FASTMem <= NextState_FASTMem;
			end if;
		end if;
	end if;
end process;

------------------------------------
-- Registered Outputs Logic
------------------------------------
FASTMem_RegOutput: process (sig_clk)
begin
	if rising_edge(sig_clk) then
		if sig_reset = '1' then
			-- FASTByte <= 		-- Initialization in the reset state or default value required!
			-- mem_counter <= 		-- Initialization in the reset state or default value required!
		else
			if sig_enable = '1' then
				sig_msg_in <= next_sig_msg_in;
				mem_counter <= next_mem_counter;
			end if;
		end if;
	end if;
end process;

bookHandler: process (sig_clk)
begin
    if rising_edge(sig_clk) then
		if sig_reset = '1' then

            counter <= 0;

            bidOrderDepthBook_size <= (OTHERS => X"0000000000000000");
            bidOrderDepthBook_px_exp <= (OTHERS => X"00000000");
            bidOrderDepthBook_px_man <= (OTHERS => X"FFFFFFFFFFFFFFFF");

            offerOrderDepthBook_size <= (OTHERS => X"0000000000000000");
            offerOrderDepthBook_px_exp <= (OTHERS => X"00000000");
            offerOrderDepthBook_px_man  <= (OTHERS => X"FFFFFFFFFFFFFFFF");
		else
			if sig_enable = '1' then

                counter <= counter + 1;

				--
                IF (sig_ready_out = '1') THEN
                    IF (sig_type_out = '0') THEN			-- bid
                            
                        for i in 9 downto 1 loop		                                        -- position shift (testar depois pq coloquei 1 agora, tava 0)
                            bidOrderDepthBook_size(i) <= bidOrderDepthBook_size(i - 1);
                            bidOrderDepthBook_px_exp(i) <= bidOrderDepthBook_px_exp(i - 1);
                            bidOrderDepthBook_px_man(i) <= bidOrderDepthBook_px_man(i - 1);
                            if i = to_integer(unsigned(sig_position_out)) then
                                    exit;
                            end if;
                        end loop;

                        bidOrderDepthBook_size(to_integer(signed(sig_position_out - 1))) <= sig_size_out;
                        bidOrderDepthBook_px_exp(to_integer(signed(sig_position_out - 1))) <= sig_exp_out;
                        bidOrderDepthBook_px_man(to_integer(signed(sig_position_out - 1))) <= sig_man_out;

                    ELSIF (sig_type_out = '1') THEN		-- offer
                    
                        for i in 9 downto 1 loop                                        		-- position shift
                            offerOrderDepthBook_size(i) <= offerOrderDepthBook_size(i - 1);
                            offerOrderDepthBook_px_exp(i) <= offerOrderDepthBook_px_exp(i - 1);
                            offerOrderDepthBook_px_man(i) <= offerOrderDepthBook_px_man(i - 1);
                            if i = to_integer(unsigned(sig_position_out)) then
                                    exit;
                            end if;
                        end loop;

                        offerOrderDepthBook_size(to_integer(signed(sig_position_out - 1))) <= sig_size_out;
                        offerOrderDepthBook_px_exp(to_integer(signed(sig_position_out - 1))) <= sig_exp_out;
                        offerOrderDepthBook_px_man(to_integer(signed(sig_position_out - 1))) <= sig_man_out;
                    END IF;
                END IF;
                --
			end if;
		end if;
	end if;
end process;



END ARCHITECTURE;
